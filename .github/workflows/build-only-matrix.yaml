name: Build Only Using Matrix

on:
  workflow_dispatch:
  push:

env:
  EXECUTABLE_NAME: cube-infinifold
  EXECUTABLE_CHECK_NAME: cube-infinifold-check

  ENABLE_CARGO_TEST: 'true'
  # ENABLE_CARGO_TEST: 'false'
  ENABLE_CARGO_BUILD: 'true'
  # ENABLE_CARGO_BUILD: 'false'
  ENABLE_PROGRAM_CHECK: 'true'
  # ENABLE_PROGRAM_CHECK: 'false'


  BUILD_ON_UBUNTU: 'true'
  # BUILD_ON_UBUNTU: 'false'
  BUILD_ON_WINDOWS: 'true'
  # BUILD_ON_WINDOWS: 'false'
  BUILD_ON_MAC: 'true'
  # BUILD_ON_MAC: 'false'

  RUST_BACKTRACE: '1'
  RUST_TOOLCHAIN: 'action-rs'

  UPLOAD_TO_GITHUB_RELEASE: 'true'

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Set outputs
        id: set_outputs
        run: |
          echo "BUILD_ON_UBUNTU=${BUILD_ON_UBUNTU}" >> $GITHUB_ENV
          echo "BUILD_ON_WINDOWS=${BUILD_ON_WINDOWS}" >> $GITHUB_ENV
          echo "BUILD_ON_MAC=${BUILD_ON_MAC}" >> $GITHUB_ENV
    outputs:
      BUILD_ON_UBUNTU: ${{ env.BUILD_ON_UBUNTU }}
      BUILD_ON_WINDOWS: ${{ env.BUILD_ON_WINDOWS }}
      BUILD_ON_MAC: ${{ env.BUILD_ON_MAC }}

  build_and_release:
    needs: prepare
    runs-on: ${{ matrix.system }}-latest
    continue-on-error: true
    timeout-minutes: 60
    strategy:
      matrix:
        system: ['windows', 'ubuntu', 'macos']
        include:
          - name: Build on Windows
            enabled: ${{ needs.prepare.outputs.BUILD_ON_WINDOWS == 'true' }}
            build_path: ./tools/build/build.ps1
          - name: Build on Linux
            enabled: ${{ needs.prepare.outputs.BUILD_ON_UBUNTU == 'true' }}
            build_path: ./tools/build/build.sh
          - name: Build on MacOS
            enabled: ${{ needs.prepare.outputs.BUILD_ON_MAC == 'true' }}
            build_path: ./tools/build/build.sh
            
    steps:
      - uses: actions/checkout@main
        if: ${{ matrix.enabled }}

      # Set up ffmpeg environment
      - name: WIndows Install dependencies
        if: ${{ matrix.system == 'windows' && matrix.enabled}}
        run: ./tools/build/pre-build.ps1
        env:
          FFMPEG_DOWNLOAD_URL: https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z
      - name: Ubuntu Install dependencies
        if: ${{ matrix.system == 'ubuntu' && matrix.enabled}}
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: clang curl pkg-config libavcodec-dev libavutil-dev libavformat-dev libavfilter-dev libavdevice-dev
          version: 1.0
      - name: MacOS Install dependencies
        if: ${{ matrix.system == 'macos' && matrix.enabled}}
        run: brew install ffmpeg pkg-config
      
      # Install rust toolchain
      - name: Setup Rust
        if: ${{ env.RUST_TOOLCHAIN == 'dtolnay' && matrix.enabled}}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable          
      - name: Rust Setup
        if: ${{ env.RUST_TOOLCHAIN == 'action-rs' && matrix.enabled}}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
        
      # Build and run and release
      - name: Build Project on Ubuntu/MacOS
        if: ${{ matrix.enabled && (matrix.system == 'ubuntu' || matrix.system == 'macos') }}
        run: |
          echo "Building on ${{ matrix.system }} using ${{ matrix.build_path }}"
          sudo sh ${{ matrix.build_path }}
        env:
          SECRET_PFX_CERTIFICATION_PASSWORD: "${{ secrets.PFX_CERTIFICATION_PASSWORD }}"
          ENV_SYSTEM: "${{ matrix.system }}"
      - name: Build Project on Windows
        if: ${{ matrix.enabled && matrix.system == 'windows' }}
        run: |
          echo "Building on ${{ matrix.system }} using ${{ matrix.build_path }}"
          powershell.exe ${{ matrix.build_path }}
        env:
          SECRET_PFX_CERTIFICATION_PASSWORD: "${{ secrets.PFX_CERTIFICATION_PASSWORD }}"
          ENV_SYSTEM: "${{ matrix.system }}"
      
      # Then upload the release
      - name: Upload Artifact
        if: ${{ matrix.enabled }}
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.EXECUTABLE_NAME }}_${{ matrix.system }}
          path: ./${{ env.EXECUTABLE_NAME }}_${{ matrix.system }}
      - name: Upload Assets to GitHub Release
        if: ${{ matrix.enabled && env.UPLOAD_TO_GITHUB_RELEASE == 'true' }}
        uses: actions/github-script@main
        with:
          script: |
            const fs = require('fs');
            const path = "./target/release/${{ env.EXECUTABLE_NAME }}_${{ matrix.system }}.zip";
            const artifact = fs.readFileSync(path);
            const date = new Date().toISOString().replace(/T/, '_').replace(/\..+/, '').replace(/:/g, '-');
            const artifactName = `Cube-Infinifold_${{ matrix.system }}_${date}.zip`;
            
            const {id} = await github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            await github.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: id,
              name: artifactName,
              data: artifact
            });

  conclude:
    needs: build_and_release
    runs-on: ubuntu-latest
    steps:
      - name: Conclude
        run: |
          echo "All done!"
          