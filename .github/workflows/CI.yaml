name: CI

on:
  workflow_dispatch:
  # push:

env:
  EXECUTABLE_NAME: cube-infinifold
  EXECUTABLE_CHECK_NAME: cube-infinifold-check

  ENABLE_CARGO_BUILD: 'true'
  # ENABLE_CARGO_BUILD: 'false'
  # ENABLE_CARGO_TEST: 'true'
  ENABLE_CARGO_TEST: 'false'
  ENABLE_PROGRAM_CHECK: 'true'
  # ENABLE_PROGRAM_CHECK: 'false'
  ENABLE_INDENPENDENT_TEST: 'true'
  # ENABLE_INDENPENDENT_TEST: 'false'
  # UPLOAD_TO_GITHUB_RELEASE: 'true'
  UPLOAD_TO_GITHUB_RELEASE: 'false'
  # UPLOAD_TO_OLD_RELEASE: 'true'
  UPLOAD_TO_OLD_RELEASE: 'false'

  BUILD_ON_UBUNTU: 'true'
  # BUILD_ON_UBUNTU: 'false'
  BUILD_ON_WINDOWS: 'true'
  # BUILD_ON_WINDOWS: 'false'
  BUILD_ON_MAC: 'true'
  # BUILD_ON_MAC: 'false'

  RUST_BACKTRACE: '1'
  RUST_TOOLCHAIN: 'dtolnay'


jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      # - name: Set outputs
      #   id: set_outputs
      #   run: |
      #     echo "BUILD_ON_UBUNTU=${BUILD_ON_UBUNTU}" >> $GITHUB_ENV
      #     echo "BUILD_ON_WINDOWS=${BUILD_ON_WINDOWS}" >> $GITHUB_ENV
      #     echo "BUILD_ON_MAC=${BUILD_ON_MAC}" >> $GITHUB_ENV
      - name: Get Latest Release ID
        if: ${{ env.UPLOAD_TO_OLD_RELEASE == 'true' }}
        id: GetLatestReleaseID
        uses: actions/github-script@main
        with:
          script: |
            const response = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            console.log(response);
            return response.data.id;
          result-encoding: string
    outputs:
      BUILD_ON_UBUNTU: ${{ env.BUILD_ON_UBUNTU }}
      BUILD_ON_WINDOWS: ${{ env.BUILD_ON_WINDOWS }}
      BUILD_ON_MAC: ${{ env.BUILD_ON_MAC }}
      ENABLE_INDENPENDENT_TEST: ${{ env.ENABLE_INDENPENDENT_TEST }}
      OLD_RELEASE_ID: ${{ steps.GetLatestReleaseID.outputs.result }}

  # build_and_release:
  #   continue-on-error: true
  #   needs: prepare
  #   runs-on: ${{ matrix.os.system }}-latest
  #   timeout-minutes: 60
  #   strategy:
  #     matrix:
  #       os: 
  #         - name: 'Build on Windows'
  #           system: 'windows'
  #           enabled: ${{ needs.prepare.outputs.BUILD_ON_WINDOWS == 'true' }}
  #           build_command: ./tools/build/build.ps1
  #         - name: 'Build on Linux'
  #           system: 'ubuntu'
  #           enabled: ${{ needs.prepare.outputs.BUILD_ON_UBUNTU == 'true' }}
  #           build_command: sh ./tools/build/build.sh
  #         - name: 'Build on MacOS'
  #           if: ${{ needs.prepare.outputs.BUILD_ON_MAC == 'true' }}
  #           system: 'macos'
  #           enabled: ${{ needs.prepare.outputs.BUILD_ON_MAC == 'true' }}
  #           build_command: sh ./tools/build/build.sh
            
  #   steps:
  #     - uses: actions/checkout@main
  #       if: ${{ matrix.os.enabled }}

  #     # Set up ffmpeg environment
  #     - name: WIndows Install dependencies
  #       if: ${{ matrix.os.system == 'windows' && matrix.os.enabled}}
  #       run: ./tools/build/pre-build.ps1
  #       env:
  #         FFMPEG_DOWNLOAD_URL: https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z
  #     - name: Ubuntu Install dependencies
  #       if: ${{ matrix.os.system == 'ubuntu' && matrix.os.enabled}}
  #       uses: awalsh128/cache-apt-pkgs-action@latest
  #       with:
  #         packages: clang curl pkg-config libavcodec-dev libavutil-dev libavformat-dev libavfilter-dev libavdevice-dev
  #         version: 1.0
  #     - name: MacOS Install dependencies
  #       if: ${{ matrix.os.system == 'macos' && matrix.os.enabled}}
  #       run: brew install ffmpeg pkg-config
      
  #     # Install rust toolchain
  #     - name: Setup Rust
  #       if: ${{ env.RUST_TOOLCHAIN == 'dtolnay' && matrix.os.enabled}}
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         toolchain: stable          
  #     - name: Rust Setup
  #       if: ${{ env.RUST_TOOLCHAIN == 'action-rs' && matrix.os.enabled}}
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         override: true
        
  #     # Build and run and release
  #     - name: Build Project on ${{ matrix.os.system}}
  #       if: ${{ matrix.os.enabled }}
  #       run: ${{ matrix.os.build_command}}
  #       env:
  #         SECRET_PFX_CERTIFICATION_PASSWORD: "${{ secrets.PFX_CERTIFICATION_PASSWORD }}"
  #         ENV_SYSTEM: "${{ matrix.os.system }}"
      
  #     # Then upload the release
  #     - name: Upload Artifact
  #       if: ${{ matrix.os.enabled }}
  #       uses: actions/upload-artifact@main
  #       with:
  #         name: ${{ env.EXECUTABLE_NAME }}_${{ matrix.os.system }}
  #         path: ${{ env.EXECUTABLE_NAME }}_${{ matrix.os.system }}
  #     - name: Upload Assets to GitHub Release
  #       if: ${{ matrix.os.enabled && env.UPLOAD_TO_OLD_RELEASE == 'true' }}
  #       uses: actions/github-script@main
  #       with:
  #         script: |
  #           const fs = require('fs');
  #           const path = "target/release/${{ env.EXECUTABLE_NAME }}_${{ matrix.os.system }}.zip";
  #           const artifact = fs.readFileSync(path);
  #           const date = new Date().toISOString().replace(/T/, '_').replace(/\..+/, '').replace(/:/g, '-');
  #           const artifactName = `Cube-Infinifold_${{ matrix.os.system }}_${date}.zip`;

  #           await github.rest.repos.uploadReleaseAsset({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             release_id: '${{ needs.prepare.outputs.OLD_RELEASE_ID }}',
  #             name: artifactName,
  #             data: artifact
  #           });

  independent_test:
    if: ${{ needs.prepare.outputs.ENABLE_INDENPENDENT_TEST == 'true'}}
    needs: 
      - prepare
      # - build_and_release
    strategy:
      matrix:
        os:
          - name: 'Test on Windows'
            system: 'windows'
            enabled: ${{ needs.prepare.outputs.BUILD_ON_WINDOWS == 'true' && needs.prepare.outputs.ENABLE_INDENPENDENT_TEST == 'true'}}
            app_extension: '.exe'
            artifact_id: '1477183193'
          - name: 'Test on Linux'
            system: 'ubuntu'
            enabled: ${{ needs.prepare.outputs.BUILD_ON_UBUNTU == 'true' && needs.prepare.outputs.ENABLE_INDENPENDENT_TEST == 'true'}}
            sudo: sudo
            artifact_id: '1477182913'
          - name: 'Test on MacOS'
            system: 'macos'
            enabled: ${{ needs.prepare.outputs.BUILD_ON_MAC == 'true' && needs.prepare.outputs.ENABLE_INDENPENDENT_TEST == 'true'}}
            artifact_id: '1477179232'
    runs-on: ${{ matrix.os.system }}-latest
    steps:
      - name: Download Artifact
        if: ${{ matrix.os.enabled }}
        uses: actions/download-artifact@main
        with:
          name: ${{ env.EXECUTABLE_NAME }}_${{ matrix.os.system }}
          path: ${{ env.EXECUTABLE_NAME }}_${{ matrix.os.system }}
          run-id: '9024908332'
      # - name: Download Artifact Directly From https://api.github.com/repos/${owner}/${repo}/actions/artifacts/${artifact_id}/zip
      #   if: ${{ matrix.os.enabled }}
      #   run: |
      #     curl -L \
      #       -o test.zip \
      #       -H "Accept: application/vnd.github.v3+json" \
      #       -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #       https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ matrix.os.artifact_id }}/zip
      #     unzip test.zip -d ${{ env.EXECUTABLE_NAME }}_${{ matrix.os.system }}
      #     ls -R

      - name: Check on ${{ matrix.os.system }}
        if: ${{ matrix.os.enabled }}
        run: ${{matrix.os.sudo}} ./${{ env.EXECUTABLE_CHECK_NAME }}${{ matrix.os.app_extension }}
        working-directory: ${{ env.EXECUTABLE_NAME }}_${{ matrix.os.system }}
      
      - name: Upload Artifact
        if: ${{ matrix.os.enabled }}
        uses: actions/upload-artifact@main
        with:
          name: independent_check_video_${{ matrix.os.system }}
          path: ${{ env.EXECUTABLE_NAME }}_${{ matrix.os.system }}/test.mp4
        
  # conclude:
  #   # needs: [build_and_release, independent_test]
  #   # needs: prepare
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@main
  #     - name: Create Release and Upload assets
  #       if: ${{ env.UPLOAD_TO_GITHUB_RELEASE == 'true' }}
  #       uses: actions/github-script@main
  #       with:
  #         script: |
  #           const response = await require('.github/workflows/create-release.js')({
  #             github,
  #             context,
  #             core,
  #             sha: '${{ github.sha }}',
  #           });
  #           console.log(response);
  #     - name: Upload Artifact release body
  #       if: ${{ env.UPLOAD_TO_GITHUB_RELEASE == 'true' }}
  #       uses: actions/upload-artifact@main
  #       with:
  #         name: release_body
  #         path: release_body.md
          